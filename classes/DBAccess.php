<?php
class DBAccess {
    private $_Conn;
    private  $_Username;
    private $_Password;
    private $_Pdo;

    public function __construct($conn, $username , $password)
    {
        $this->_Conn = $conn;
        $this->_Username = $username;
        $this->_Password = $password;
    }

    public function connect()
    {
        try {
            $this->_Pdo = new PDO($this->_Conn, $this->_Username , $this->_Password);
            $this->_Pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
       
        }
        catch(PDOException $e){
            die("Connection Failed:" . $e->getMessage());
        }

        return $this->_Pdo;
        
    }

    public function prepareQuery($sql){
        $state = $this->_Pdo->prepare($sql);
        return $state;
    }

    public function prepareStatement($statment, $param, $paramVal, $paramType){

        $sql = $this->_Pdo->prepare($statment);
        $sql->bindParam($param ,$paramVal, $this->returnPDOType($paramType));
        $sql->execute();
        return $sql;
    }

    private function returnPDOType($type){
        switch($type){
           
                case 2:
                    return PDO::PARAM_INT;
                
                default:
               return PDO::PARAM_STR;
    
            }
            return PDO::PARAM_STR;
    }
    public function prepareMultiParamStatement($statment, $param , $paramType,$param2, $paramType2 ){
        $sql = $this->_Pdo->prepare($statment);
        $sql->bindParam(1,$param ,$this->returnPDOType($paramType));
        $sql->bindParam(2,$param2 ,$this->returnPDOType($paramType2));

      
        $sql->execute();
        return $sql;
    }

   public function runStatement($statement){
        $sql = $this->_Pdo->prepare($statement);
        $sql->execute();
        return $sql;
   }

   	//return a single value
	public function executeSQLReturnOneValue($stmt)
	{
		try
		{
			//execute the query
			$stmt->execute();
			$value = $stmt->fetchColumn();
			
		}
		catch(PDOException $e)
		{
			die("Query failed: " . $e->getMessage());
		}
		return $value;
	}

    //execute insert, update and delete statements
	public function executeNonQuery($stmt, $pkid=false)
	{
		try
		{
			$value = $stmt->execute();
		
			//get the primary key ID generated by the DB
			if($pkid == true)
			{
				$value = $this->_Pdo->lastInsertId();
			}
			
		}
		catch(PDOException $e)
		{
			
			if ($e->getCode() == 23000)
			{
				$value = -1;
			}
			else
			{
				die("Query failed: " . $e->getMessage());
			}

		}

		//return the primary key if one was generated otherwise returns true/false
		return $value;
	}

    public function disconnect()
    {
        $this->_Pdo = "";
    }

    public function executeSQL($sql){
        try {
            $rows = $this->_Pdo->query($sql);
        } catch(PDOException $e){
            die("Query failed: " . $e->getMessage());
        }
        return $rows;
    }
}


 
?>